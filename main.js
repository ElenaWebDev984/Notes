// date
const MAX_TITLE_LENGTH = 50;
const MESSAGE_DISPLAY_DURATION = 3000;

const colors = {
  yellow: 'var(--note-color1)',
  green: 'var(--note-color2)',
  blue: 'var(--note-color3)',
  red: 'var(--note-color4)',
  purple: 'var(--note-color5)',
};

const images = {
  noteDone: 'assets\images\Done.svg',
  noteMaxLengthError: 'assets\images\warning.svg',
  heartActive: 'assets\images\heartActive.svg',
  heartInactive: 'assets\images\heartInactive.svg',
  checkboxActive: 'assets\images\checkboxActive.svg',
  checkboxInactive:'assets\images\checkboxInactive.svg',
  deleteNotBtn: 'assets\images\trash.svg',
};

const messages = {
  alertNoteDone: '–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!',
  alertMaxTitleLengthError: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ - 50 —Å–∏–º–≤–æ–ª–æ–≤',
  requiredBothFields: '–û–±–∞ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã',
};

// –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö
const model = {
    notes: [],
    isShowOnlyFavorite: false,

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –∏–∑ localStorage
    loadNotes() {
        const savedNotes = localStorage.getItem('notes');
        this.notes = savedNotes ? JSON.parse(savedNotes) : [];
    },

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –≤ localStorage
    saveNotes() {
        localStorage.setItem('notes', JSON.stringify(this.notes));
    },

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
    addNote(title, content, color) {
        const note = {
            id: Date.now(), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            title,
            content,
            color,
            isFavorite: false,
        };
        this.notes.unshift(note); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
        this.saveNotes();
    },

    // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
    deleteNote(noteId) {
        this.notes = this.notes.filter((note) => note.id !== noteId);
        this.saveNotes();
    },

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    toggleFavorite(noteId) {
        const note = this.notes.find((note) => note.id === noteId);
        if (note) {
            note.isFavorite = !note.isFavorite;
            this.saveNotes();
        }
    },

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ "–¢–æ–ª—å–∫–æ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ"
    toggleShowOnlyFavorite() {
        this.isShowOnlyFavorite = !this.isShowOnlyFavorite;
    },
};

// –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö)
const view = {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init() {
        model.loadNotes();
        this.renderNotes();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        document.querySelector('.note-form').addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleAddNote();
        });

        document.querySelector('.checkbox-filter').addEventListener('change', () => {
            model.toggleShowOnlyFavorite();
            this.renderNotes();
        });

        document.querySelector('.notes-list').addEventListener('click', (e) => {
            if (e.target.classList.contains('delete-button')) {
                const noteId = +e.target.closest('li').id;
                model.deleteNote(noteId);
                this.renderNotes();
            }

            if (e.target.classList.contains('favorite-button')) {
                const noteId = +e.target.closest('li').id;
                model.toggleFavorite(noteId);
                this.renderNotes();
            }
        });
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
    handleAddNote() {
        const title = document.querySelector('#note-title').value.trim();
        const content = document.querySelector('#description-text').value.trim();
        const color = document.querySelector('input[name="color"]:checked').value;

        if (!title || !content) {
            this.showMessage('–û–±–∞ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã', false);
            return;
        }

        if (title.length > MAX_TITLE_LENGTH) {
            this.showMessage('–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ', false);
            return;
        }

        if (content.length > MAX_CONTENT_LENGTH) {
            this.showMessage('–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ', false);
            return;
        }

        model.addNote(title, content, color);
        this.renderNotes();
        this.showMessage('–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', true);

        // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
        document.querySelector('#note-title').value = '';
        document.querySelector('#description-text').value = '';
    },

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫
    renderNotes() {
        const notesList = document.querySelector('.notes-list ul');
        const notesToRender = model.isShowOnlyFavorite
            ? model.notes.filter((note) => note.isFavorite)
            : model.notes;

        if (notesToRender.length === 0) {
            notesList.innerHTML = `<li class="no-notes">–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫</li>`;
            return;
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–º–µ—Ç–∫–∏
        notesList.innerHTML = notesToRender
            .map(
                (note) => `
            <li id="${note.id}">
                <div class="note-wrapper" style="border-color: ${note.color}">
                    <div class="note-header">
                        <p class="note-title">${note.title}</p>
                        <div class="buttons-wrapper">
                            <button class="favorite-button">
                                ${note.isFavorite ? '‚òÖ' : '‚òÜ'}
                            </button>
                            <button class="delete-button">üóëÔ∏è</button>
                        </div>
                    </div>
                    <p class="note-content">${note.content}</p>
                </div>
            </li>`
            )
            .join('');
    },

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    showMessage(message, isSuccess) {
        const messagesBox = document.querySelector('.messages-box');
        const messageElement = document.createElement('div');
        messageElement.className = `message ${isSuccess ? 'success' : 'error'}`;
        messageElement.textContent = message;

        messagesBox.appendChild(messageElement);

        // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            messageElement.remove();
        }, MESSAGE_DISPLAY_DURATION);
    },
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
view.init();